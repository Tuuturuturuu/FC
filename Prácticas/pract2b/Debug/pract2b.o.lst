   1              	# 1 "../pract2b.asm"
   1              	/*-----------------------------------------------------------------
   0              	
   0              	
   0              	
   2              	**
   3              	**  Fichero:
   4              	**    pract2b.asm  10/6/2014
   5              	**
   6              	**    Fundamentos de Computadores
   7              	**    Dpto. de Arquitectura de Computadores y Automática
   8              	**    Facultad de Informática. Universidad Complutense de Madrid
   9              	**
  10              	**  Propósito:
  11              	**    Ordena de mayor a menor un vector de enteros positivos
  12              	**
  13              	**  Notas de diseño:
  14              	**
  15              	**---------------------------------------------------------------*/
  16              	
  17              	
  18              	
  19              	.global start
  20              	
  21              	.EQU 	N, 8
  22              	.EQU 	M, 2
  23              	
  24              	.data
  25 0000 07000000 	A: 		.word 7,3,25,4,75,2,1,1
  25      03000000 
  25      19000000 
  25      04000000 
  25      4B000000 
  26              	
  27              	.bss
  28 0000 00000000 	B: 		.space N*4
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29 0020 00000000 	max: 	.space 4
  30 0024 00000000 	ind: 	.space 4
  31 0028 00000000 	C: 		.space N*4
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32 0048 00000000 	P: 		.space N*4
  32      00000000 
  32      00000000 
  32      00000000 
  32      00000000 
  33              	
  34              	.text
  35              	start:
  36 0000 0090A0E3 			mov r9, #0
  37 0004 00C0A0E3 			mov r12, #0
  38 0008 B4009FE5 			ldr r0,=A
  39 000c B4109FE5 			ldr r1,= max
  40 0010 B4209FE5 			ldr r2,= ind
  41 0014 00C082E5 			str r12,[r2]
  42 0018 B0309FE5 			ldr r3,= B
  43 001c B0B09FE5 			ldr r11,=C
  44 0020 B0809FE5 			ldr r8,=P
  45              	
  46 0024 0050A0E3 			mov r5, #0	@j
  47              	for1:
  48 0028 080055E3 			cmp r5, #N
  49 002c 160000AA 			bge fin_for1
  50 0030 0060A0E3 			mov r6, #0
  51 0034 0040A0E3 			mov r4, #0 @i
  52 0038 006081E5 			str r6, [r1]
  53              	for2:
  54 003c 080054E3 			cmp r4,#N
  55 0040 080000AA 			bge fin_for2
  56              	if:
  57 0044 047190E7 			ldr r7,[r0,r4,lsl#2]
  58 0048 060057E1 			cmp r7, r6
  59 004c 030000DA 			ble else
  60 0050 0760A0E1 			mov r6, r7
  61 0054 006081E5 			str r6,[r1]
  62 0058 04C0A0E1 			mov r12, r4
  63 005c 00C082E5 			str r12, [r2]
  64              	else:
  65 0060 014084E2 			add r4, r4,#1
  66 0064 F4FFFFEA 			b for2
  67              	fin_for2:
  68 0068 056183E7 			str r6,[r3,r5, lsl#2]
  69 006c 08D0A0E3 			mov r13, #N
  70 0070 01D04DE2 			sub r13, r13, #1
  71 0074 05D04DE0 			sub r13, r13, r5
  72 0078 0D618BE7 			str r6, [r11, r13,lsl#2]
  73 007c 00D0A0E3 			mov r13, #0
  74 0080 0CD180E7 			str r13,[r0, r12,lsl#2]
  75 0084 015085E2 			add r5, r5, #1
  76 0088 E6FFFFEA 			b for1
  77              	fin_for1:
  78 008c 00B0A0E3 	mov r11,#0 @k
  79 0090 08005BE3 	cmp r11, #N
  80 0094 090000AA 	bge fin_for3
  81 0098 0BC193E7 	ldr r12, [r3, r11, lsl#2]
  82              	
  83              	while:
  84 009c 02005CE3 			cmp r12, #M
  85 00a0 010000BA 			blt fin_while
  86 00a4 02C04CE2 			sub r12,r12,#M
  87 00a8 FBFFFFEA 			b while
  88              	
  89              	fin_while:
  90 00ac 00005CE3 	cmp r12, #0
  91 00b0 010000CA 	bgt impar
  92 00b4 0B8183E7 	str r8, [r3, r11, lsl#2]
  93 00b8 F3FFFFEA 	b fin_for1
  94              	impar:
  95 00bc 008089E5 	str r8, [r9]
  96              	
  97              	fin_for3:
  98 00c0 FEFFFFEA 			b .
  99 00c4 00000000 			.end
  99      20000000 
  99      24000000 
  99      00000000 
  99      28000000 
DEFINED SYMBOLS
      ../pract2b.asm:35     .text:00000000 start
      ../pract2b.asm:21     *ABS*:00000008 N
      ../pract2b.asm:22     *ABS*:00000002 M
      ../pract2b.asm:25     .data:00000000 A
      ../pract2b.asm:28     .bss:00000000 B
      ../pract2b.asm:28     .bss:00000000 $d
      ../pract2b.asm:29     .bss:00000020 max
      ../pract2b.asm:30     .bss:00000024 ind
      ../pract2b.asm:31     .bss:00000028 C
      ../pract2b.asm:32     .bss:00000048 P
      ../pract2b.asm:36     .text:00000000 $a
      ../pract2b.asm:47     .text:00000028 for1
      ../pract2b.asm:77     .text:0000008c fin_for1
      ../pract2b.asm:53     .text:0000003c for2
      ../pract2b.asm:67     .text:00000068 fin_for2
      ../pract2b.asm:56     .text:00000044 if
      ../pract2b.asm:64     .text:00000060 else
      ../pract2b.asm:97     .text:000000c0 fin_for3
      ../pract2b.asm:83     .text:0000009c while
      ../pract2b.asm:89     .text:000000ac fin_while
      ../pract2b.asm:94     .text:000000bc impar
      ../pract2b.asm:99     .text:000000c4 $d
                   .debug_aranges:0000000c $d

NO UNDEFINED SYMBOLS
